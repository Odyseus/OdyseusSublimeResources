%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# The MIT License (MIT)

# Copyright (c) 2013 carsonoid

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
name: Man Page (groff/troff)
file_extensions:
  - man
  - groff
scope: text.groff
contexts:
  main:
    - match: ^\.\\".*$
      comment: comments
      scope: comment.macro.text.groff
    - match: ^(\.UR)\b(.*)$
      comment: email address macro
      captures:
        1: keyword.text.groff
        2: constant.other.text.groff
      push:
        - meta_scope: uri.macro.text.groff
        - match: ^(\.UE)
          captures:
            1: keyword.text.groff
          pop: true
        - match: .
          scope: string.text.groff
    - match: ^(\.MT)\b(.*)$
      comment: email address macro
      captures:
        1: keyword.text.groff
        2: constant.other.text.groff
      push:
        - meta_scope: emailaddress.macro.text.groff
        - match: ^(\.ME)
          captures:
            1: keyword.text.groff
          pop: true
        - match: .
          scope: string.text.groff
    - match: '^(\.OP)\s([^\s]+)\s?(.*)$'
      comment: text style macros
      scope: option.macro.text.groff
      captures:
        1: keyword.text.groff
        2: support.constant.text.groff
        3: string.text.groff
    - match: ^(\.SM|\.SB|\.BI|\.IB|\.RI|\.IR|\.BR|\.RB|\.B|\.I)\b
      comment: text style macros
      captures:
        1: keyword.text.groff
      push:
        - meta_scope: style.macro.text.groff
        - match: $
          pop: true
        - match: .
          comment: catch-all
          scope: string.text.groff
    - match: '^(\.[a-zA-Z]*\s?)(\s?.+)?$'
      comment: marco catch-all
      scope: macro.text.groff
      captures:
        1: keyword.text.groff
        2: entity.text.groff
